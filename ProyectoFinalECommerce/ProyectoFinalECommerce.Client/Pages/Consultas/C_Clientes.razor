@page "/consultaClientes"

@inject HttpClient httpClient
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer

@attribute [Authorize(Roles ="Admin")]

<AuthorizeView Roles ="Admin">
    <Authorized>
<div class="container">
    <div class="card">

        <div class="card-header">
            <head>
                <h1>Consulta de Clientes</h1>
            </head>
        </div>

        <div class="card-body">
            <body>

                <a href="/registroClientes"><button type="button" class="btn btn-info"><i class="oi oi-plus"> Agregar Nuevo Cliente</i></button></a>

                <div class="row">

                    <div class="col">
                        <label>Desde</label>
                        <InputDate @bind-Value="Desde" class="form-control"></InputDate>
                    </div>

                    <div class="col">
                        <label>Hasta</label>
                        <InputDate @bind-Value="Hasta" class="form-control"></InputDate>
                    </div>
                </div>

                <div class="row">

                    <div class="col">
                        <label>Campo</label>
                        <InputSelect @bind-Value="opcFiltrado" class="form-select">
                            <option valie="0" disabled selected>Seleccione</option>
                            <option value="1">Busqueda por ID</option>
                            <option value="2">Busqueda por Nombre</option>
                            <option value="3">Busqueda por Apellido</option>
                        </InputSelect>
                     </div>

                    <div class="col">
                        <label>Filtrar</label>
                        @switch (opcFiltrado)
                        {
                            case 1:
                                <InputNumber class="form-control" @bind-Value="cliente.ClienteId"></InputNumber>
                                Conteo = 0;
                            break;

                            case 2:
                                <InputText class="form-control" @bind-Value="cliente.Nombre"></InputText>
                            break;

                            case 3:
                                <InputText class="form-control" @bind-Value="cliente.Apellido"></InputText>
                            break;
                        }
                     </div>

                    <div class="col">
                        <button type="button" class="btn btn-outline-primary" @onclick="Buscar"> <i class="oi oi-reload"> Buscar</i></button>
                    </div>
                </div>

                @if (clientes is not null)
                {
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Cliente Id</th>
                                <th>Fecha de Nacimiento</th>
                                <th>Nombre</th>
                                <th>Apellido</th>
                                <th>C&eacute;dula</th>
                                <th></th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var cliente in clientes)
                            {
                                <tr>
                                    <td>@cliente.ClienteId</td>
                                    <td>@cliente.FechaNacimiento.ToString("dd/MM/yyyy")</td>
                                    <td>@cliente.Nombre</td>
                                    <td>@cliente.Apellido</td>
                                    <td>@cliente.Cedula</td>
                                    <td><a href="/registroClientes/@cliente.ClienteId"><button type="button" class="btn btn-outline-primary"><i class="oi oi-eye"></i> Ver</button></a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </body>
        </div>

        <div class="card-footer">
            <div class="form-row justify-content-sm-between" aria-orientation="vertical">
                <div class="col-3">
                    <label for="CantidadFilas" class="col-form-label"><strong>Num. Filas</strong>&nbsp;</label>
                    <input id="CantidadFilas" @bind-value="@Conteo" disabled class="form-control" />
                </div>
            </div>
        </div>

    </div>
</div>


    </Authorized>

    <NotAuthorized>
        <p>Mio, le falta nivel, vayase y venga cuando sea gente</p>
    </NotAuthorized>
</AuthorizeView>

@code
{
    public List<Clientes> clientes { get; set; } = new List<Clientes>();
    public int Conteo { get; set; }

    public DateTime Desde { get; set; }

    public DateTime Hasta { get; set; }

    public int clienteId { get; set; }

    public int opcFiltrado { get; set; }

    public Clientes cliente { get; set; } = new Clientes();

    protected override async Task OnInitializedAsync()
    {
        Desde = DateTime.Now.AddYears(-75);
        Hasta = DateTime.Now.AddYears(-17);
    }

    public async Task Buscar()
    {
        clientes = await httpClient.GetFromJsonAsync<List<Clientes>>($"api/Clientes");


        if(Desde != default && Hasta != default)
        {
            clientes = clientes.Where(c => c.FechaNacimiento >= Desde.Date && c.FechaNacimiento <= Hasta).ToList();
        }
        switch (opcFiltrado)
        {
            case 1:
                if (Desde != default && Hasta != default)
                {
                    clientes = clientes.Where(c => c.FechaNacimiento >= Desde.Date && c.FechaNacimiento <= Hasta).ToList();
                }

                if(cliente.ClienteId > 0)
                {
                    clientes = clientes.Where(c => c.ClienteId == cliente.ClienteId).ToList();
                }

                break;

            case 2:
                if (Desde != default && Hasta != default)
                {
                    clientes = clientes.Where(c => c.FechaNacimiento >= Desde.Date && c.FechaNacimiento <= Hasta).ToList();
                }

                if (!string.IsNullOrEmpty(cliente.Nombre))
                {
                    clientes = clientes.Where(c => c.Nombre.ToLower().Contains(cliente.Nombre.ToLower())).ToList();
                }


                break;
            case 3:
                if (Desde != default && Hasta != default)
                {
                    clientes = clientes.Where(c => c.FechaNacimiento >= Desde.Date && c.FechaNacimiento <= Hasta).ToList();
                }

                if (!string.IsNullOrEmpty(cliente.Apellido))
                {
                    clientes = clientes.Where(c => c.Apellido.ToLower().Contains(cliente.Apellido.ToLower())).ToList();
                }
                break;
        }


        Conteo = clientes != null ? clientes.Count : 0;
        StateHasChanged();
    }
}