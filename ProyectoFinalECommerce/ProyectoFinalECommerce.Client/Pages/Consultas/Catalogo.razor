@page "/Catalogo"
@page "/Catalogo/{UrlCategoria}"

@inject HttpClient httpClient
@inject IServicioProducto ServicioProducto
@inject IServicioCategoria ServicioCategoria

<div class="productos">

    @foreach (var item in FiltradoProductos())
    {
        <div class="card col-3 item-card">
            <div class="img-container">
                @if (item.Foto != null)
                {
                    var base64 = Convert.ToBase64String(item.Foto);
                    var imgSrc = $"data:image/jpeg;base64,{base64}";

                    <img src="@imgSrc" alt="Imagen del producto" class="item-imagen" width="300" />
                    
                }
            </div>

            <div class="card-body">

                <div class="mb-3">
                    <strong>Nombre:</strong> @item.Nombre
                </div>
                <div class="mb-3">
                    <strong>Descripción:</strong> @item.Descripcion
                </div>
                <div class="mb-3">
                    <strong>Precio:</strong> $@item.Precio
                </div>
                <a href="/detallesProducto/@item.ProductoId"><button type="button" class="btn btn-info">Ver mas</button></a>
            </div>

            
        </div>
    }
</div>

@code 
{
    [Parameter]
    public string UrlCategoria { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await ServicioProducto.CargarProductos($"api/Productos/{UrlCategoria}");
    }

    private IEnumerable<Productos> FiltradoProductos()
    {
        var productos = ServicioProducto.productos;

        if (!string.IsNullOrEmpty(UrlCategoria))
        {
            var categoria = ServicioCategoria.L_Categorias.FirstOrDefault(c => c.Url.ToLower() == UrlCategoria.ToLower());

            if(categoria != null)
            {
                return productos.Where(p => p.CategoriaId == categoria.CategoriaId);
            }
        }

        return productos;
    }


}