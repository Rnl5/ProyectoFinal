@page "/R_Producto"

@inject HttpClient httpClient
@inject NotificationService notificationService

@rendermode InteractiveServer

<RadzenNotification />
<EditForm Model="producto" OnValidSubmit="Guardar" FormName="R_Producto">
    <DataAnnotationsValidator/>


    <div class="container"> 
        <div class="card"> 
             <div class="card-header">
                <h3>Registro de productos</h3>
            </div> 

            
                 <div class="col-2">
                    <label>Producto Id</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="ProductoId" class="form-control" aria-describedby="botonBuscar"></InputNumber>
                    <button type="button" @onclick="Buscar" class="btn btn-outline-primary"><i class="bi bi-search"></i></button>
                    </div>
                </div> 
                
                <div class="col-3">
                     <label>Fecha de ingreso</label>
                    <div class="input-group mb-3">
                        <InputDate class="form-control" @bind-Value="producto.Fecha"></InputDate>
                        <ValidationMessage For="@(() => producto.Fecha)"></ValidationMessage>
                    </div> 
                </div>

                 <div class="row">
                    <div class="col-3">
                        <label>Nombre:</label>
                        <div class="input-group mb-3">
                            <InputText @bind-Value="producto.Nombre" class="form-control"></InputText>
                            <ValidationMessage For="@(() => producto.Nombre)"></ValidationMessage>
                        </div>
                    </div>

                    <div class="col-5">
                        <label>Descripcion</label>
                        <div class="input-group mb-3">
                            <InputTextArea @bind-Value="producto.Descripcion" class="form-control"></InputTextArea>
                            <ValidationMessage For="@(() => producto.Descripcion)"></ValidationMessage>
                        </div>
                    </div>
                </div> 

                 <div class="row">
                    <div class="col-3">
                        <label>Precio:</label>
                        <div class="input-group mb-3">
                            <InputNumber class="form-control" @bind-Value="producto.Precio"></InputNumber>
                            <ValidationMessage For="@(() => producto.Precio)"></ValidationMessage>
                        </div>
                    </div>

                    <div class="col-3">
                        <label>Precio Original</label>
                        <div class="input-group mb-3">
                            <InputNumber class="form-control" @bind-Value="producto.PrecioOriginal"></InputNumber>
                            <ValidationMessage For="@(() => producto.PrecioOriginal)"></ValidationMessage>
                        </div>
                    </div>
                </div> 

                 <div class="row">
                     <div class="col-3">
                         <label>Categorias:</label>
                         <div class="input-group mb-3">
                            <InputSelect class="form-select" @bind-Value="producto.CategoriaId">
                                <option value="0" disabled selected>Seleccione la categoria</option>
                                @foreach(var categoria in L_Categorias)
                            {
                                <option value="@categoria.CategoriaId">@categoria.Nombre</option>
                            }
                        </InputSelect>
                         </div>
                     </div>

                    <div class="col-4">
                        <label>Foto del producto:</label>
                        <div class="input-group mb-3">
                            <InputFile OnChange="CargarImagen" class="form-control" accept=".png, .jpg, .jpeg"></InputFile>
                        </div>
                    </div>
                </div>

                <div class="card-footer d-flex justify-content-center">
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="bi bi-file-earmark" /></button>
                        <button type="submit" class="btn btn-outline-success">Guardar <i class="bi bi-file-earmark-check-fill" /></button>
                        <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="bi bi-trash3" /></button>
                    </div>
                </div>
         </div> 
     </div>
</EditForm>


@code
{
    [Parameter]
    public int ProductoId { get; set; }

    [SupplyParameterFromForm]
    public Productos producto { get; set; } = new Productos();

    public IEnumerable<Categorias> L_Categorias { get; set; } = Enumerable.Empty<Categorias>();

    public NotificationMessage Mensaje { get; set; } = new NotificationMessage();


    protected override async Task OnInitializedAsync()
    {
        await CargarCategorias();
        if (ProductoId > 0)
        {
            producto.ProductoId = ProductoId;
            await Buscar();
        }
    }

    private async Task CargarCategorias()
    {
        var categoriaEncontrada = await httpClient.GetFromJsonAsync<IEnumerable<Categorias>>("api/Categorias");

        if(categoriaEncontrada != null)
        {
            L_Categorias = categoriaEncontrada;
        }
    }

    public async Task Buscar()
    {
        var productoEncontrado = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        if (productoEncontrado != null)
        {
            producto = productoEncontrado;
            StateHasChanged();
        }
        else
        {
            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al buscar un producto",
                    Detail = "Ha ocurrido un error a la hora de buscar un producto",
                    Duration = 5_000
                };
            notificationService.Notify(Mensaje);
            return;
        }
    }

    public async void Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Productos", producto);

            if (!response.IsSuccessStatusCode)
            {
                Mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error al guardar",
                        Detail = "Ha ocurrido un error",
                        Duration = 5_000
                    };
                notificationService.Notify(Mensaje);
                return;
            }

            var productoDevuelto = await response.Content.ReadFromJsonAsync<Productos>();

            if(productoDevuelto is not null)
            {
                producto = productoDevuelto;
                StateHasChanged();
                Nuevo();

                Mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Exito al guardar",
                        Detail = "Ha guardado correctamente",
                        Duration = 5_000
                    };
                notificationService.Notify(Mensaje);
                return;
            }
    }

    public void Nuevo()
    {
        this.producto = new Productos();

        Mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Se ha limpiado el formulario",
                Detail = "Ahora puede rellenar nuevamente el formulario",
                Duration = 5_000
            };
        notificationService.Notify(Mensaje);
        return;
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Productos/{producto.ProductoId}");

        if(!response.IsSuccessStatusCode)
        {
            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al eliminar",
                    Detail = "Ha ocurrido un error a la hora de eliminar",
                    Duration = 5_000
                };
            notificationService.Notify(Mensaje);
            return;
        }
        else
        {
            Nuevo();
            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito al eliminar",
                    Detail = "Ha eliminado el producto correctamente",
                    Duration = 5_000
                };
            notificationService.Notify(Mensaje);
            return;
        }
    }


    public async Task CargarImagen(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        var buffer = new byte[archivo.Size];

        await archivo.OpenReadStream().ReadAsync(buffer);
        producto.Foto = buffer;
    }
}