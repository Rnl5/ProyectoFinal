@page "/R_Producto"

@inject HttpClient httpClient

@rendermode InteractiveServer



<EditForm Model="producto" OnValidSubmit="Guardar" FormName="R_Producto">
    <DataAnnotationsValidator/>

    <div class="container"> 
        <div class="card"> 
             <div class="card-header">
                <h3>Registro de productos</h3>
            </div> 

            
                 <div class="col">
                    <label>Producto Id</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="ProductoId" class="form-control" aria-describedby="botonBuscar"></InputNumber>
                        <button type="button" @onclick="Buscar" class="btn btn-outline-primary"></button>
                    </div>
                </div> 

                 <label>Fecha de ingreso</label>
                <div class="input-group mb-3">
                    <InputDate class="form-control" @bind-Value="producto.Fecha"></InputDate>
                    _<ValidationMessage For="@(() => producto.Fecha)"></ValidationMessage>
                </div> 

                 <div class="row">
                    <div class="col">
                        <label>Nombre:</label>
                        <div class="input-group mb-3">
                            <InputText @bind-Value="producto.Nombre" class="form-control"></InputText>
                            <ValidationMessage For="@(() => producto.Nombre)"></ValidationMessage>
                        </div>
                    </div>

                    <div class="col">
                        <label>Descripcion</label>
                        <div class="input-group mb-3">
                            <InputTextArea @bind-Value="producto.Descripcion" class="form-control"></InputTextArea>
                            <ValidationMessage For="@(() => producto.Descripcion)"></ValidationMessage>
                        </div>
                    </div>
                </div> 

                 <div class="row">
                    <div class="col">
                        <label>Precio:</label>
                        <div class="input-group mb-3">
                            <InputNumber class="form-control" @bind-Value="producto.Precio"></InputNumber>
                            <ValidationMessage For="@(() => producto.Precio)"></ValidationMessage>
                        </div>
                    </div>

                    <div class="col">
                        <label>Precio Original</label>
                        <div class="input-group mb-3">
                            <InputNumber class="form-control" @bind-Value="producto.PrecioOriginal"></InputNumber>
                            <ValidationMessage For="@(() => producto.PrecioOriginal)"></ValidationMessage>
                        </div>
                    </div>
                </div> 

                 <div class="row">
                     <div class="col">
                         <label>Categorias:</label>
                         <div class="input-group mb-3">
                            <InputSelect class="form-select" @bind-Value="producto.CategoriaId">
                                <option value="0" disabled selected>Seleccione la categoria</option>
                                @foreach(var categoria in L_Categorias)
                            {
                                <option value="@categoria.CategoriaId">@categoria.Nombre</option>
                            }
                        </InputSelect>
                         </div>
                     </div>

                    <div class="col">
                        <label>Foto del producto:</label>
                        <div class="input-group mb-3">
                            <InputFile OnChange="CargarImagen" class="form-control" accept=".png, .jpg, .jpeg"></InputFile>
                        </div>
                    </div>
                </div>

                <div class="card-footer d-flex justify-content-center">
                    <div class="btn-group">

                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                    
                    </div>
                </div>



         </div> 
     </div>


</EditForm>


@code
{
    [Parameter]
    public int ProductoId { get; set; }

    [SupplyParameterFromForm]
    public Productos producto { get; set; } = new Productos();

    public List<Productos> productos { get; set; } = new List<Productos>();

    public IEnumerable<Categorias> L_Categorias { get; set; } = Enumerable.Empty<Categorias>();

    public int categoriaSeleccionada { get; set; }

    public string Mensaje { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await CargarCategorias();
        if (ProductoId > 0)
        {
            producto.ProductoId = ProductoId;
            await Buscar();
        }
    }

    private async Task CargarCategorias()
    {
        var categoriaEncontrada = await httpClient.GetFromJsonAsync<IEnumerable<Categorias>>("api/Categorias");

        if(categoriaEncontrada != null)
        {
            L_Categorias = categoriaEncontrada;
        }
    }

    public async Task Buscar()
    {
        var productoEncontrado = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{producto.ProductoId}");

        if (productoEncontrado != null)
        {
            producto = productoEncontrado;
            StateHasChanged();
        }
        else
        {
            Mensaje = "Producto no encontrado";
        }
    }

    public async void Guardar()
    {
        try
        {
            using var response = await httpClient.PostAsJsonAsync("api/Productos", producto);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Error en la solicitud: {response.StatusCode}");
                return;
            }

            var productoDevuelto = await response.Content.ReadFromJsonAsync<Productos>();

            if(productoDevuelto is not null)
            {
                producto = productoDevuelto;
                StateHasChanged();
                Nuevo();
            }
        }catch(Exception ex)
        {
            Console.WriteLine($"Error al procesar la solicitud: {ex.Message}");
        }
    }

    public void Nuevo()
    {
        producto = new Productos();
        Mensaje = string.Empty;
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Productos/{producto.ProductoId}");

        if(!response.IsSuccessStatusCode)
        {
            Mensaje = response.ReasonPhrase ?? "Error";
            return;
        }
        else
        {
            Nuevo();
        }
    }


    public async Task CargarImagen(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        var buffer = new byte[archivo.Size];

        await archivo.OpenReadStream().ReadAsync(buffer);
        producto.Foto = buffer;
    }
    
}