@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ProyectoFinalECommerce.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject HttpClient httpClient

<PageTitle>Registro</PageTitle>

<h1>Registro</h1>
<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        
            <DataAnnotationsValidator />
            <h2>Crea una cuenta nueva.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="nombre@ejemplo.com" />
                <label for="email">Correo electrónico</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="contraseña" />
                <label for="password">Contraseña</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="contraseña" />
                <label for="confirm-password">Confirmar contraseña</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Registro</button>
        
    </div>
    <div class="col-md-6 col-md-offset-2">
            <section>
                <h3>Datos Personales</h3>
                <div class="row">
                    <div class="col">
                        <div class="form-floating mb-3">
                            <InputText type="text" @bind-Value="Input.Nombre" class="form-control" autocomplete="nombre" aria-required="true" placeholder="Nombre" />
                            <label for="nombreCliente">Nombres</label>
                            <ValidationMessage For="() => Input.Nombre" class="text-danger" />
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-floating mb-3">
                            <InputText type="text" @bind-Value="Input.Apellido" class="form-control" autocomplete="apellido" aria-required="true" placeholder="Apellido" />
                            <label for="apellidoCliente">Apellidos</label>
                            <ValidationMessage For="() => Input.Apellido" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <div class="form-floating mb-3">
                            <InputDate @bind-Value="Input.FechaNacimiento" class="form-control" autocomplete="fechaNacimiento" aria-required="true" placeholder="Fecha de Nacimiento" />
                            <label for="fechaNacimientoCliente">Fecha de Nacimiento</label>
                            <ValidationMessage For="() => Input.FechaNacimiento" class="text-danger" />
                        </div>
                    </div>

                    <div class="col">
                        <div class="form-floating mb-3">
                            <InputText type="text" @bind-Value="Input.NumeroCedula" class="form-control" autocomplete="numeroCedula" aria-required="true" placeholder="Numero de Cedula" />
                            <label for="numeroCedulaCliente">Numero de Cedula</label>
                            <ValidationMessage For="() => Input.NumeroCedula" class="text-danger" />
                        </div>
                    </div>
                </div>

                @* <div class="row">
                    <fieldset class="border-success border border-1">
                        <div class="d-flex justify-content-center">
                            <h3>Ingrese los telefonos externos que quiere asignar</h3>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col">
                                <label>Tipo de telefono</label>
                                <div class="input-group mb-3">
                                    <InputSelect class="form-select" @bind-Value="tipoTelefonoSeleccionado">
                                        <option value="0" disabled selected> Seleccione el tipo de telefono</option>
                                        @foreach (var tipoT in L_TiposTelefono)
                                        {
                                            <option value="@tipoT.TipoTelId">@tipoT.TipoTelefono</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="col">
                                <label>Nombre:</label>
                                <div class="input-group mb-3">
                                    <InputText class="form-control" @bind-Value="nombreInsertado"></InputText>
                                </div>
                            </div>

                            <div class="col">
                                <label>Telefono:</label>
                                <div class="input-group mb-3">
                                    <InputText class="form-control" @bind-Value="telefonoInsertado"></InputText>
                                </div>
                            </div>

                            <div class="col">
                                <button type="button" class="btn btn-outline-primary" @onclick="AgregarDetalle">Agregar</button>
                            </div>

                            @if (ValidacionD.Length > 0)
                            {
                                <label class="text-danger">@ValidacionD</label>
                            }
                        </div>

                        <hr />

                        <table class="table table-bordered table-light m-1">
                            <thead class="thead">
                                <tr class="table">
                                    <th>Tipo telefono</th>
                                    <th>Nombre:</th>
                                    <th>Telefono</th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var detalle in clientes.ClientesDetalle)
                                {
                                    <tr>
                                        <td>@(TipoTelefono(detalle.TipoTelId))</td>
                                        <td>@detalle.Nombre</td>
                                        <td>@detalle.Telefono</td>
                                        <td><button @onclick="@(() => RemoverDetalle(detalle))" class="btn btn-outline-danger" type="button"><i class="oi oi-trash">Eliminar</i></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </fieldset>
                </div> *@
                
            </section>
    </div>
        @*<section>
            <h3>Utilice otro servicio para registrarse.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>*@
</div>
</EditForm>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    // public IEnumerable<TelefonosClientes> L_TiposTelefono { get; set; } = Enumerable.Empty<TelefonosClientes>();

    // public Clientes clientes { get; set; } = new Clientes();
    // public int tipoTelefonoSeleccionado { get; set; }

    // public string nombreInsertado { get; set; } = string.Empty;

    // public string telefonoInsertado { get; set; } = string.Empty;

    // public string ValidacionD { get; set; } = string.Empty;


    // protected override async Task OnInitializedAsync()
    // {
    //     await CargarTiposTelefonos();
    // }

    public async Task RegisterUser(EditContext editContext)
    {
        // using var response = await httpClient.PostAsJsonAsync("api/Clientes", clientes);

        var user = CreateUser();

        user.Nombre = Input.Nombre;
        user.Apellido = Input.Apellido;
        user.FechaNacimiento = Input.FechaNacimiento;
        user.NumeroCedula = Input.NumeroCedula;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);



        // if (!response.IsSuccessStatusCode)
        // {
        //     return;
        // }

        // var clienteDevuelto = await response.Content.ReadFromJsonAsync<Clientes>();

        // if (clienteDevuelto is not null)
        // {
        //     clientes = clienteDevuelto;
        //     StateHasChanged();
        // }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }


    // public void AgregarDetalle()
    // {
    //     Console.WriteLine("Mio, yo estoy entrando");
    //     if (!ValidarDetalle())
    //     {
    //         return;
    //     }

    //     clientes.ClientesDetalle.Add(new ClientesDetalle
    //         {
    //             TipoTelId = tipoTelefonoSeleccionado,
    //             Nombre = nombreInsertado,
    //             Telefono = telefonoInsertado
    //         });
    //     tipoTelefonoSeleccionado = 0;
    //     nombreInsertado = string.Empty;
    //     telefonoInsertado = string.Empty;
    //     StateHasChanged();
    // }

    // public void RemoverDetalle(ClientesDetalle detalleRemover)
    // {
    //     tipoTelefonoSeleccionado = detalleRemover.TipoTelId;
    //     nombreInsertado = detalleRemover.Nombre;
    //     telefonoInsertado = detalleRemover.Telefono;

    //     clientes.ClientesDetalle.Remove(detalleRemover);
    // }

    // public bool ValidarDetalle()
    // {
    //     ValidacionD = string.Empty;

    //     if (tipoTelefonoSeleccionado <= 0)
    //     {
    //         ValidacionD = "El tipo de telefono es obligatorio";
    //     }

    //     if (string.IsNullOrWhiteSpace(nombreInsertado))
    //     {
    //         ValidacionD = "El nombre es obligatorio";
    //     }

    //     if (string.IsNullOrWhiteSpace(telefonoInsertado))
    //     {
    //         ValidacionD = "El numero telefonico es obligatorio";
    //     }


    //     return ValidacionD.Length == 0;
    // }

    // private async Task CargarTiposTelefonos()
    // {
    //     var encontrados = await httpClient.GetFromJsonAsync<IEnumerable<TelefonosClientes>>("api/TelefonosClientes");
    //     if (encontrados != null)
    //     {
    //         L_TiposTelefono = encontrados;
    //     }
    // }

    // public string TipoTelefono(int tipoId)
    // {
    //     var tipoTel = L_TiposTelefono.FirstOrDefault(t => t.TipoTelId == tipoId);

    //     return tipoTel!.TipoTelefono;
    // }



    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        public string Nombre { get; set; } = string.Empty;

        public string Apellido { get; set; } = string.Empty;

        public DateTime FechaNacimiento { get; set; }

        public string NumeroCedula { get; set; } = string.Empty;

    }
}
